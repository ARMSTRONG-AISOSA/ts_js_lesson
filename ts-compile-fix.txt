### Promise Error

The TypeScript compiler is complaining because by default it‚Äôs compiling to ES5, which does not have Promise or async/await built in.

That‚Äôs why you‚Äôre getting errors like:
    --Cannot find global value 'Promise'
    --'Promise' only refers to a type, but is being used as a value here.
    --An async function or method in ES5 requires the 'Promise' constructor

üîß Fix
You need to tell TypeScript to target a newer version of JavaScript (es2015 or later) so that it knows about Promise and async/await.

Option 1: Pass options directly
Run:
    tsc json.ts --target es2015 --lib es2015,dom
```
--target es2015: compiles to modern JS with promises + async/await.
--lib es2015,dom: adds the Promise, console, and localStorage definitions.

‚ö° Quick Note
    --If you only run in Node.js, you don‚Äôt need "dom".
    --If you run in the browser (you‚Äôre using localStorage), you must include "dom".





### Module 'export' errors

A top-level 'export' modifier cannot be used on value declarations in a CommonJS module when 'verbatimModuleSyntax' is enabled.

That error means your TypeScript config (tsconfig.json) is using verbatimModuleSyntax: true, which enforces stricter ECMAScript module (ESM) syntax rules.

In this mode:
You can‚Äôt use export directly on variable/function declarations in CommonJS.

FIX:
Make your project ESM (recommended if you want modern syntax)

code: json
    {
    "type": "module"
    }

Since you installed TypeScript globally on your Linux PC, you probably don‚Äôt have a local project setup yet ‚Äî which means there might not be a package.json at all in your project folder.

STEPS
1. Check if package.json exists

2. Create package.json if missing
code: bash
    npm init -y

3. Enable ESM in your project
Edit package.json and add:
code: json
    {
    "name": "my-project",
    "version": "1.0.0",
    "type": "module",   // üëà add this line
    "main": "index.js",
    "license": "ISC"
    }

This tells Node + TS: ‚Äútreat my .ts/.js files as ES modules.‚Äù
Now your export { ... } syntax will work.