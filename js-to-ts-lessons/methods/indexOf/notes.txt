In JavaScript, `indexOf` is a built-in method used to find the **first index** at which a given element can be found in an array or a string. It returns the index number of the first occurrence of the element. If the element is not found, it returns **-1**.


### Using `indexOf` with Strings
The `indexOf` method for strings is used to search for a specific substring within a string. The search is case-sensitive.

**Syntax:** `string.indexOf(searchValue, [fromIndex])`
  * `searchValue`: The substring you're looking for.
  * `fromIndex` (optional): The index to start the search from. If omitted, the search starts from the beginning (index 0).

**Examples: 1**
check code @ indexOf.js

-----

### Using `indexOf` with Arrays
The `indexOf` method for arrays is used to find the first index of a specific element within an array. It performs a strict equality (===) comparison.

**Syntax:** `array.indexOf(searchElement, [fromIndex])`
  * `searchElement`: The element you're looking for.
  * `fromIndex` (optional): The index to start the search from. If omitted, the search starts from the beginning (index 0).

**Examples: 2**

1.  **Basic usage:**
check code @ indexOf.js

-----

### Important Considerations
  * **Case-Sensitivity:** For strings, `indexOf` is **case-sensitive**. 'World' and 'world' are treated as different.
  * **Strict Equality:** For arrays, `indexOf` uses strict equality (`===`), meaning it will not find `1` if you search for `'1'`.
  * **Performance:** For very large arrays or strings, more advanced search algorithms might be more efficient, but for most common use cases, `indexOf` is sufficient and easy to use.
  * **Alternative Methods:** For searching in arrays, you can also use `findIndex()` if you need to search based on a condition rather than a specific value, or `includes()` if you just want to know if an element exists without needing its index.


### **Finding all occurrences of a character in a string**
While `indexOf` only finds the first occurrence, you can use a `while` loop to find all of them. This is a common and practical use case.

example 3
check code @ indexOf.js
-----

### **Checking for the existence of an item**
A simple and common pattern is to use `indexOf` to check if an item exists in an array. If the return value isn't `-1`, the item is present. While the `includes()` method is now preferred for this specific purpose as it is more readable, `indexOf` is a classic way to achieve this.

example 4
check code @ indexOf.js

-----

### **Validating a string's format**

You can use `indexOf` to quickly validate whether a string contains a specific character or pattern, such as checking if an email address contains an `@` symbol.

example 5
check code @ indexOf.js