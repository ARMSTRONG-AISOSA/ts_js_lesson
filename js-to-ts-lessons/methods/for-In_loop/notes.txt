
The `for...in` loop iterates through all **enumerable string properties** of an object and its prototype chain. It's primarily designed for objects, not arrays, and should be used with caution due to its behavior.
-----
In JavaScript, enumerable means that a property can be listed or looped over â€” for example, by a loop like:
    --for...in
    --Object.keys()
    --Object.entries()

If a property is enumerable, it shows up in those loops. If itâ€™s non-enumerable, it wonâ€™t shown even when present.

## Code Syntax:
    for (const key in object) {
    // Code to execute for each property key
    // 'key' holds the name (string) of the property
    // object[key] holds the value of the property
    }

### Example ðŸ’¡
Here, the loop will run once for each property name: `model`, `year`, and `color`.
````Check code example 1


## Why Use `hasOwnProperty()`
A major characteristic of `for...in` is that it iterates over properties that are on the object **itself** (own properties) *and* properties that are **inherited** from its prototype chain.
    Prototype: An object that another object inherits properties/methods from
    Prototype Chain: The linked list of objects JS follows when searching for a property (child -> parent)

To ensure you only process the properties directly defined on the object (which is usually what you want), you must use the **`Object.prototype.hasOwnProperty()`** method inside the loop.
```Check code example



## ðŸ›‘ Caution: Do NOT Use `for...in` for Arrays
You should **avoid** using `for...in` to iterate over arrays where the order of elements is important. For iterating over array elements, use `for...of`, `forEach()`, or a traditional `for` loop.

Feature             | `for...in` | `for...of` |
**Purpose**         | Iterates over **Object Properties** (keys). | Iterates over **Array Values** (elements). |
**Data Type**       | Returns property **keys** as **strings**. | Returns element **values** directly. |
**Order**           | Order of iteration is **not guaranteed** (though most modern engines try to preserve it). | Iterates in the **correct numerical index order**. |
**Prototype Chain** | Iterates over inherited properties unless blocked by `hasOwnProperty()`. | Does **not** iterate over object properties or the prototype chain. |

**In summary:**
  * âœ… Use **`for...in`** (with `hasOwnProperty`) for iterating over **object properties**.
  * âœ… Use **`for...of`** for iterating over **array elements** or any iterable collection (like Maps, Sets, or Strings).