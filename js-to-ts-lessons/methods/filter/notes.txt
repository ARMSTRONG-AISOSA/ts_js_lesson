The `filter()` method is is used to **select** a subset of elements from an array based on a specific condition. It returns a **new array** containing only the elements that passed the test, and just like `map()`, it does not modify the original array.

### How it Works
The `filter()` method calls a function for each element in an array. This function, called a "callback function," must return either `true` or `false`.

* If the function returns `true`, the element is kept and added to the new, filtered array.
* If the function returns `false`, the element is ignored and not included in the new array.

Syntax is `array.filter(callbackFunction)`.

The callback function takes the same arguments as `map()`:

1.  **`currentValue`**: The current element being processed in the array.
2.  **`index`** (optional): The index of the current element.
3.  **`array`** (optional): The array `filter()` was called upon.

### Example: Filtering an Array of Numbers
// Check code (filter.js) 

### Example: Filtering an Array of Objects
// Check code (filter.js) 


`filter()` is extremely useful for finding objects that match certain criteria from a collection. 

// Check code (filter.js) for Object example 



### Why `filter()` is better than a `for` loop
    --Similar to `map()`, using a `for` loop to achieve the same result would be more verbose and less readable.

    --The `filter()` method is a declarative approach, meaning you tell it *what* you want (elements that pass a certain test), rather than *how* to do it (manual loop, conditional check, and `push`). This makes the code cleaner and easier to understand.

    --`filter()` is the perfect tool for creating a new, smaller array by selecting elements from the original array that meet a specified condition.


### Example 1: Finding Strings That Match a Pattern
// Check code (filter.js) for example 

# Breakdown
The `filter()` method checks each `name` in the array. The callback function `name => name.startsWith('J')` returns `true` for 'Jane' and 'John', and `false` for all other names, resulting in the new array containing only the matching elements.

### Example 2: Filtering an Array of Objects Based on Multiple Conditions
// Check code (filter.js) for example 


This demonstrates the power of `filter()` to narrow down a dataset to a very specific set of results.

### Example 3: Removing "Falsy" Values from an Array
// Check code (filter.js) for example 

In JavaScript, some values are considered "falsy," meaning they evaluate to `false` in a boolean context. These include `false`, `0`, an empty string `""`, `null`, and `undefined`. You can use `filter()` to easily clean up an array by removing all falsy values.

// The callback function `Boolean` checks the truthiness of each value.
// It is the same as writing `item => Boolean(item)`.
const cleanedArray = mixedArray.filter(Boolean);


In this elegant solution, `filter()` uses the built-in `Boolean` function to test each item. Only the items that evaluate to `true` (the "truthy" values) are kept in the new array. This is a very common and efficient trick for data sanitization.