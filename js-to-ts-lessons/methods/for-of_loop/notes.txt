The **`for...of`** loop is a modern JavaScript construct introduced in ECMAScript 2015 (ES6) designed specifically to iterate over the **values** stored in **iterable objects**. It's the cleanest and most reliable way to loop through collections like Arrays, Strings, Maps, Sets, and NodeLists.

## Key Function and Syntax
The `for...of` loop executes a block of code for each item in an iterable object.

### Syntax
    for (const element of iterable) {
      // Code to execute for the current 'element' value
    }


### Example ðŸ’¡ (Arrays)
The loop directly provides the **value** of the array element in each iteration.
````Check Code

## Key Uses of `for...of`

### 1\. Iterating Over Arrays (Recommended Method)
Unlike `for...in` (which gives you the string keys/indices), `for...of` gives you the element values in the correct sequential order.
````Check Code


### 2\. Iterating Over Arrays
Strings are iterable, so `for...of` can easily iterate over individual characters.
````Check Code


### 3\. Iterating Over Other Collections (Maps and Sets)
`for...of` is the standard way to iterate over the values of built-in ES6 collections.
````Check Code

| Collection Type | Example |
| :--- | :--- |
| **Set** (iterates values) | `const unique = new Set([1, 2, 3]); for (const val of unique) { ... }` |
| **Map** (iterates entries as `[key, value]` arrays) | `const settings = new Map([['theme', 'dark']]); for (const [key, value] of settings) { console.log(key, value); }` |


## `for...of` vs. Other Loops
| Feature     | `for...of` | `for...in` | `forEach()` |
| **Returns** | Element **Value** | Property **Key** (as string) | Element **Value** (via callback) |
| **Best For** | Arrays, Strings, Maps, Sets (any iterable). | Plain Objects (for properties). | Arrays (where simple iteration is needed). |
| **Control** | Can use `break` and `continue`. | Can use `break` and `continue`. | Cannot use `break` or `continue` (only `return` to skip an iteration). |

**In summary: Use `for...of` whenever you need to reliably loop through the *contents* (values) of an ordered collection.**