JSON (JavaScript Object Notation) is not just a JavaScript feature; it's a **language-independent data format** used to transmit data across a network (like sending data from a server to a web page). However, it is deeply integrated into JavaScript because it is based on a subset of the JavaScript object literal syntax.

In short, **JSON is a text format for storing and transporting data.**
-----

## 1\. What JSON Looks Like
JSON data is written as name/value pairs, similar to JavaScript object properties.

**JSON Rules:**
  * **Data is in name/value pairs:** `"name": "value"`
  * **Keys must be strings:** They must be enclosed in double quotes.
  * **Values must be one of the following:**
      * A string (in double quotes)
      * A number
      * A JSON object (enclosed in curly braces `{}`)
      * A JSON array (enclosed in square brackets `[]`)
      * A boolean (`true` or `false`)
      * `null`

### Example of a JSON Object:
```json
{
  "firstName": "John",
  "lastName": "Doe",
  "age": 35,
  "isStudent": false,
  "hobbies": ["reading", "hiking", "coding"],
  "address": {
    "street": "123 Main St",
    "city": "Anytown"
  }
}
```

-----

## 2\. JSON in JavaScript: The Global `JSON` Object
In JavaScript, you work with JSON using the global built-in `JSON` object, which has two primary static methods for converting between JavaScript objects and JSON strings.

### A. `JSON.stringify()` (JavaScript Object --> JSON String)
This method takes a JavaScript object or array and converts it into a JSON string. This is necessary when you need to **send data** to a web server, or when **storing data** in web storage (like `localStorage`), which only accepts strings.
```check javascript code @ json.js
// 1. A regular JavaScript object
// 2. Convert the JavaScript object to a JSON string
-----

### B. `JSON.parse()` (JSON String --> JavaScript Object)
This method takes a JSON string and converts it into a native JavaScript object or array. This is necessary when you **receive data** from a server (like an API response) or when **retrieving data** from `localStorage`.
```check javascript code @ json.js
// 1. A JSON string received from an API or storage
// 2. Convert the JSON string back into a JavaScript object
-----

## 3\. Practical Use Case Summary
| Action                | JavaScript Method      | Purpose |
| **Sending Data**      | `JSON.stringify(data)` | Prepares data to be sent across the network (e.g., in an HTTP request body). |
| **Storing Data**      | `JSON.stringify(data)` | Converts data to a string for storage in `localStorage` or `sessionStorage`. |
| **Receiving Data**    | `JSON.parse(string)`   | Converts a server's text response into a usable JavaScript object. |
| **Retrieving Data**   | `JSON.parse(string)`   | Converts a string retrieved from web storage back into a usable object. |

In modern web development, dealing with JSON is an everyday task, and the `JSON.stringify()` and `JSON.parse()` methods are the essential tools for managing this data exchange.


Here are three more practical examples of using JSON methods in JavaScript.
### Example 1: Sending an Array of Data to a Server
When sending data to an API, you often need to package an array of items (like a batch of form submissions or a shopping cart) into a single JSON string.
check code @ json.js
// Note: This string is what would be sent in the body of an HTTP POST request.
```

### Example 2: Storing and Retrieving Complex Data in localStorage
Since `localStorage` only stores strings, you must use `JSON.stringify()` before storing an object and `JSON.parse()` when retrieving it.
check code @ json.js
```

### Example 3: Handling JSON Response from an API Call
When an external API sends a response, it's typically received as a text string that needs to be parsed before it can be used in your application.
check code @ json.js
```