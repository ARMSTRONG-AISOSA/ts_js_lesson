Destructuring in JavaScript is a feature that allows you to extract values from arrays or properties from objects into distinct variables. It provides a more concise and readable way to access and use data.

## =================== Array Destructuring
Array destructuring lets you unpack values from arrays directly into variables. The order of the variables on the left side of the assignment determines which values from the array on the right side are assigned.

check code @ destructuring.js -- = Array Destructuring

You can also skip values, use a rest parameter to gather the remaining elements, or set default values.
  * **Skipping values**: Use commas to skip elements you don't want to extract.
    check code @ destructuring.js

  * **Rest parameter**: Use the spread syntax (`...`) to collect the remaining elements into a new array.
    check code @ destructuring.js

  * **Default values**: Assign a default value to a variable in case the array element is `undefined`.
    check code @ destructuring.js


## =================== Object Destructuring
Object destructuring extracts properties from objects into variables. Unlike array destructuring, the order doesn't matter; you match the variable name on the left with the property key on the right.
check code @ destructuring.js -- = Object Destructuring

You can also use aliases, set default values, or use a rest parameter.
  * **Aliases**: Rename a destructured property to a different variable name using a colon (`:`).
    check code @ destructuring.js

  * **Default values**: Assign a default value if a property is not found on the object.
    check code @ destructuring.js

  * **Rest parameter**: Use the spread syntax (`...`) to collect the remaining properties into a new object.
    check code @ destructuring.js

-----

## Practical Applications
Destructuring is often used for:
  * **Function parameters**: It simplifies passing and receiving multiple values in a function. For example, instead of 
  `function getUser(user) { ... }`, you can do 
  `function getUser({ name, age }) { ... }`.

  * **Swapping variables**: You can swap the values of two variables without a temporary variable.
    check code @ destructuring.js

  * **Working with API data**: It's incredibly useful for pulling specific fields from a large JSON object returned by an API, making your code cleaner and easier to read.

### Example 1: Function Parameters with Object Destructuring
Destructuring can make function signatures cleaner and more readable, especially when dealing with a configuration object. Instead of accessing properties with `data.name`, you can directly use the property names as variables.
check code @ destructuring.js

-----

### Example 2: Swapping Variables
Destructuring provides an elegant and concise way to swap the values of two variables without needing a temporary third variable. This is a classic use case for array destructuring.
check code @ destructuring.js

-----

### Example 3: Pulling Data from an API Response
When you receive a large JSON object from an API, you often only need a few specific fields. Destructuring allows you to extract those fields directly into variables, ignoring the rest. This makes the code much more readable and less prone to errors.
check code @ destructuring.js
